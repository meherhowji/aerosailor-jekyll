<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Aerosailor</title>
 <link href="http://aerosailor.com/atom.xml" rel="self"/>
 <link href="http://aerosailor.com/"/>
 <updated>2018-10-12T09:43:12+05:30</updated>
 <id>http://aerosailor.com</id>
 <author>
   <name>Meher Ranjan Howji</name>
   <email>mail@aerosailor.com</email>
 </author>

 
 <entry>
   <title>Building an Elm Library for Foundation CSS Framework</title>
   <link href="http://aerosailor.com/blog/elm-foundation/"/>
   <updated>2018-10-09T00:00:00+05:30</updated>
   <id>http://aerosailor.com/blog/elm-foundation</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/public/elm.png&quot; alt=&quot;Elm Logo&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Elm is a functional language that compiles to JavaScript. If you are used to using a tech stack that involved Webpack, 
Redux, npm/yarn, React, Immutable.js &amp;amp; TypeScript, then you would be shocked to death to know that Elm takes care of all
that.&lt;/p&gt;

&lt;p&gt;I have recently used Foundation in one of my projects and I saw an opportunity to write a Foundation library for Elm. The most 
popular Elm library at the moment is elm-mdl, however it is not actively maintained. Foundation 6 is packed with the most
advanced CSS framework in the web, Grid XY. And I saw an opportunity to bring this to the Elm community.&lt;/p&gt;

&lt;p&gt;Following is a little sneak peek of what the Elm code will look like compared to the actual HTML that we write to
achieve the same.&lt;/p&gt;

&lt;p&gt;On a sidenote, I would really appreciate if you support the project. Please let me know that this project is
useful, there is not other way for me to know.&lt;/p&gt;

&lt;p&gt;Look Ma! Still no love :cry:&lt;/p&gt;
&lt;iframe src=&quot;https://ghbtns.com/github-btn.html?user=meherranjan&amp;amp;repo=elm-foundation&amp;amp;type=star&amp;amp;count=true&amp;amp;size=large&quot; frameborder=&quot;0&quot; scrolling=&quot;0&quot; width=&quot;160px&quot; height=&quot;30px&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;Grid XY in HTML / CSS&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container fluid&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;grid-x margin-x&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cell&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Hello Elm! --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Grid XY in Elm. Clear &amp;amp; Concise!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Html&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Msg&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fluid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;direction&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gutter&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Margin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cell&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Machine Learning: Coding a Neuron in JavaScript - Part 1</title>
   <link href="http://aerosailor.com/blog/machine-learning-coding-a-neuron-in-javascript/"/>
   <updated>2018-07-09T00:00:00+05:30</updated>
   <id>http://aerosailor.com/blog/machine-learning-coding-a-neuron-in-javascript</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/public/neuron.jpg&quot; alt=&quot;image tooltip here&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;We see around ourselves surrounded by some very common and strange use cases of machine learning in our digital ecosystem. From movie recommendation to facial recognition, some very common apps that we use deploy such algorithms to help us deliver a better technological ecosystem. A very smallest unit of such an algorithm is a Neuron. A neural network is a collection of neurons. You can find many libraries that give you power to create a neural network with just few lines of code.&lt;/p&gt;

&lt;p&gt;However writing your own neural network is definitely not that much amount of code either, trust me with this. We write a thousand line of code in a month or more, how long is just a hundred! Not much trust me. And we will break that 100 line into groups so that its even more easier to understand. A neuron has a life cycle and its phases will help us modularise our code . I hope by the end of this blog post you will feel neural network to be more fascinating than mind-bending.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-neuron&quot;&gt;What is a neuron?&lt;/h2&gt;
&lt;p&gt;A neural network or a neuron we are going to program performs very much similar to a biological functioning neuron. A biological neuron is essentially a structural and the primary unit of nervous system. They are the longest living cells in your body and in particular many research indicates that the nerve cells or neuron in our cerebral cortex live as long as we do. They are irreplaceable. They consume over 25% of calories you take in a day.&lt;/p&gt;

&lt;p&gt;A neuron has 3 parts; soma, dendrite and axon. Soma is the cell body contains all the regular cell stuff like DNA, RNA, Mitochondria, nucleus etc. Dendrites are the listeners, they take inputs from other neurons or cells and pass it on to the cell body. And the axons transmit electrical impulses to the other cells. That is the general structure and data flow.&lt;/p&gt;

&lt;h2 id=&quot;action-potential&quot;&gt;Action Potential&lt;/h2&gt;
&lt;p&gt;So when a neuron is stimulated enough it sends out an electrical impulses. A neuron is negatively charged when is resting and the membranes around it are positive. The movement of charge from the membranes to the cell body is key to the electricial activity in the neurons. Not all the events cause the flow of ions along the axons, such events that do, create enough Action Potential.&lt;/p&gt;

&lt;p&gt;The potential difference of neuron and the membrane is around -70mW. When an external event creates enough stimulus to cross the potential from -70mW to &lt;strong&gt;-55mW&lt;/strong&gt;,  and when it further crosses till 40mW, a biological chain reaction is created and impulse is sent down the axon and an output is received.&lt;/p&gt;

&lt;p&gt;Now, we understood a threshold(certain events) trigger the action potential. And the threshold at its simplest form looks like a switch. A neuron either fires or doesn’t to look at it another way. Therefore, threshold condition can be safely assumed as a random number.&lt;/p&gt;

&lt;h2 id=&quot;why-did-i-read-all-that&quot;&gt;Why Did I Read All That?&lt;/h2&gt;
&lt;p&gt;Analysis! Before we jump into coding aren’t we as a programmer supposed to perform an analysis to 
break down problem into simple parts. This process not only brings clarity but also helps identify any unknowns that we encounter. 
A neuron is supposed to behave intelligent when grouped together.
Biological neuron is the only source of truth for us when we it comes to intelligence. Where else do we look?
Many phenomena that a biological neuron performs are named similarly in our mathematical neuron and understanding latter definitely gives a good jumping off point for one to start learning.&lt;/p&gt;

&lt;p&gt;Now putting our neuron ride in next gear we are going to take a moment and define certain key terms that will help us
build our neuron. Don’t be surprised to find a one-on-one mapping between the computational and the biological neuron.&lt;/p&gt;

&lt;h2 id=&quot;activation-function&quot;&gt;Activation Function&lt;/h2&gt;

&lt;p&gt;So &lt;strong&gt;activation function&lt;/strong&gt; precisely is a non linear function which decides whether the output of the neuron should be forwarded/propagated-forward or not. Without an activation function it is impossible to solve a non-linear problem.
Linear equations are those that have constant change in x &amp;amp; y. Eg miles and km conversion. In other words, functions that would make up a straight line on a cartesian plane.&lt;/p&gt;

&lt;p&gt;Essentially this function determines whether the neuron will fire or not. Remember action potential? 
In a real world, visualising this function can be very abstract(physical + chemical + physcological)
The way I see it is, lets say you got a gift from a friend, probability is you’ll like and may not too. What determines that you will like and not cannot be factored or even listed down. 
This is a very profound idea. There are several types of activation function and they all do something different that each other.&lt;/p&gt;

&lt;h2 id=&quot;perceptron&quot;&gt;Perceptron&lt;/h2&gt;
&lt;p&gt;Its the simplest neural network, with just one single neuron. It is based on feed forward model so when input is fed to the network, some processeing is performed and an output is returned. Lets look at the steps:&lt;/p&gt;

&lt;h4 id=&quot;feeding-input&quot;&gt;Feeding Input&lt;/h4&gt;
&lt;p&gt;Lets use a simple function, sin(x), as the input to our perceptron.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// sin(0) = 0&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// sin(30) = 0.5&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// sin(60) = 0.866&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// sin(90) = 1&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;adding-weights&quot;&gt;Adding Weights&lt;/h4&gt;
&lt;p&gt;Every input that passes through neuron must be weighted.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;passing-through-activation-function&quot;&gt;Passing through activation function&lt;/h4&gt;
&lt;p&gt;Our activation function is very simple at its best. Its limits our output within a range and returns binary output, either 0 or 1. Following is a very simple step function which is like a switch with 2 states; on or off. We have many such other functions that can gives us a ranged output. Another very popular such function is Sigmoid, it features a S-shaped curved.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// step function&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stepFn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// sigmoid&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sigmoidFn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div id=&quot;sigmoidplot&quot;&gt;&lt;/div&gt;
&lt;script&gt;
const sp = document.querySelector(&quot;#sigmoidplot&quot;);
window.addEventListener('load', function () {
	functionPlot({
		title: 'y = 1 / (1 + exp(-x))',
		target: sp,
		width: 730,
		tip: {
			renderer: function() {}
		},
		xAxis: {
			domain: [-3, 3]
		},
		yAxis: {
			domain: [-3, 3]
		},
		grid: false,
		data: [
			{
				fn: &quot;(1/(1 + exp(-x)))&quot;,
			}
		],
		disableZoom: true,
	});
});
&lt;/script&gt;

&lt;h4 id=&quot;output&quot;&gt;Output&lt;/h4&gt;
&lt;p&gt;This is the guess of our single neuron and its far from accurate because we haven’t trained it yet.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;activationFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;activationFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;cost-function&quot;&gt;Cost Function&lt;/h3&gt;
&lt;p&gt;We have our neuron making guesses but they are just some random values, how do we correct it. Before that we need to find out how far are we from our target value. A cost function is what answers that.&lt;/p&gt;

&lt;div id=&quot;costpredplot&quot;&gt;&lt;/div&gt;
&lt;script&gt;
const cpp = document.querySelector(&quot;#costpredplot&quot;);
window.addEventListener('load', function () {
	functionPlot({
		title: 'y = (x - 5) ^ 2',
		target: cpp,
		width: 730,
		tip: {
			renderer: function() {}
		},
		xAxis: {
			domain: [-8, 20],
			label: 'prediction'
		},
		yAxis: {
			domain: [-2, 10],
			label: 'cost function'
		},
		grid: false,
		data: [
			{
				fn: &quot;(x - 2) ^ 2&quot;,
				derivative: {
					fn: '2 * (x - 2)',
					x0: 2,
					updateOnMouseMove: true
				}
			}
		],
		disableZoom: true,
	});
});
&lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>A Minimal Pomodoro App In ReactJS</title>
   <link href="http://aerosailor.com/blog/minimal-pomodoro-app-in-reactjs/"/>
   <updated>2018-03-24T00:00:00+05:30</updated>
   <id>http://aerosailor.com/blog/minimal-pomodoro-app-in-reactjs</id>
   <content type="html">&lt;p class=&quot;codepen&quot; data-embed-version=&quot;2&quot; data-slug-hash=&quot;bLjgXM&quot; data-height=&quot;650&quot; data-default-tab=&quot;js,result&quot;&gt;&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;!--more--&gt;

&lt;p&gt;React JS is one of my favorite JavaScript framework, my most favorite part is how view and controller are designed, they stay nicely together like young siblings. A general try out app for many developers is a todo app but I think a Pomodoro App is an equal competitor but packs less user stories and hence simple enough to execute quickly.&lt;/p&gt;

&lt;h5 id=&quot;i-was-trying-to-accomplish-these-use-cases-simple-enough&quot;&gt;I was trying to accomplish these use cases, simple enough.&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;A user can start and stop timer by button actions.&lt;/li&gt;
  &lt;li&gt;A user can set a custom the time settings.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;code-birdview&quot;&gt;Code Birdview&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pomodoro&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		  &lt;span class=&quot;c1&quot;&gt;//time components&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;beginTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;resetTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;updateNewTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;chooseSetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;formatTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
	  &lt;span class=&quot;c1&quot;&gt;//template and events&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;BeginTimer&lt;/strong&gt; checks whether the timer is running, if not then initiates a set interval.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Runner&lt;/strong&gt; is invoked at every second, updating state and various time components.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ResetTimer&lt;/strong&gt; clears the interval and sets the newly set second as the new timer value.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;UpdateNewTime&lt;/strong&gt; updates the timer value to new one set by the user. The new timer value is loaded when the &lt;strong&gt;resettimer&lt;/strong&gt; is clicked by the user.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ChooseSetter&lt;/strong&gt; determines which component of the time user us trying to update, accordingly appropriate seconds are removed.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;FormatTime&lt;/strong&gt; is used to update the time components in the state object all the time. Because the app uses only seconds for operations, we need this utility.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Have a look at the codepen editor to go through the code. I am sure there would be scope of improvements and optimization. My idea was to play around with React in a simple fun way.&lt;/p&gt;

&lt;p&gt;Share or leave a comment if you like the Pomodoro app.&lt;/p&gt;
</content>
 </entry>
 

</feed>
